#summary Documentation for the Python connector framework

= Introduction =
	The Python connector framework provides a simple, quick way to write connectors for the GSA.

= Writing a Connector =
== Prerequisites ==
  * Python 2.4
  * [http://cherrypy.org/ CherryPy 3]
The sample files for this documentation are available in the repository.

== Example ==
Here is a very simple, intuitive connector that fetches the contents of a URL and then pushes it to the GSA as a content feed:

{{{
import timed_connector
import urllib2

class URLConnector(timed_connector.TimedConnector):
  CONNECTOR_TYPE = 'url-connector'
  CONNECTOR_CONFIG = {
      'url': { 'type': 'text', 'label': 'URL to fetch' },
      'delay': { 'type': 'text', 'label': 'Fetch delay' }
  }

  def init(self):
    self.setInterval(int(self.getConfigParam('delay')))

  def run(self):
    url = self.getConfigParam('url')
    req = urllib2.Request(url)
    response = urllib2.urlopen(req)
    content = response.read()
    self.sendContentFeed(url=url, action='add', mimetype='text/html',
                         content=content)
}}}

Here are a few things to note about this connector:
  * The `URLConnector` extends the `TimedConnector` class. This `TimedConnector` is a special type of connector that implements a simple scheduling scheme--when it is started, it will call its `run` method periodically, with a delay interval specified by the `setInterval` method.
  * All connectors must have a unique `CONNECTOR_TYPE` field that identifies the particular type of connector.
  * `The CONNECTOR_CONFIG` dictionary specifies configuration fields for the connector. When the connector's configuration form is brought up in the GSA administration interface, this `CONNECTOR_CONFIG` will be used to construct the form.
  * The `init` method, which is available to all connectors, is called when the connector is created or when its configuration is modified. It's the perfect place to load and process configuration parameters.
  * The `sendContentFeed` method packages content data in an XML block that the GSA will accept. Here, the `URLConnector` sends the content as HTML to be added to the GSA's index.

== Running the connector ==
Now that we have a connector written, it's time to use the connector manager to expose this connector to the GSA.

  * Start the connector manager.
{{{
python connectormanager.py --debug --connectors=url_connector.URLConnector
}}}
  The `--debug` flag causes the script to print debug information as it executes. The `--connectors` flag lists the connector classes to be loaded by the connector manager. Each class must be specified with its Python package name relative to the location of `connectormanager.py`. In the above example, the `URLConnector` class is located in the file `url_connector.py` in the same directory as `connectormanager.py`.

  It's also important to note that multiple connector types can be loaded. To do so, simply separate their names with commas. For example:
{{{
python connectormanager.py --debug --connectors=url_connector.URLConnector,other_connector.OtherConnector
}}}

  (For the purposes of the rest of this section, suppose that this script is running on the host `myconnector.mydomain.com`).
  * Next, open the GSA administration console. Create a new connector manager and set the host to `http://myconnector.mydomain.com:38080` (note: no '/' at the end).
  * Create a connector instance with the new connector manager, and configure the connector appropriately.
  * Ensure that the URLs that the connector feeds into the GSA match the patterns listed in the admin console in the Crawl URLs page. Otherwise, the GSA will reject the feed provided by the connector.